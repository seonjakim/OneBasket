{"version":3,"sources":["constants/index.ts","lib/formValidation.ts","pages/components/DropdownGroup.tsx","pages/components/ToastMessage.tsx","pages/Register.tsx"],"names":["emailRegex","RegExp","toKorean","identity","reason","plan","duration","name","gender","birthday","address","email","phoneNumber","identityItems","value","label","durationItems","genderItems","arrayOfEmptyValues","obj","Object","keys","filter","key","DropdownGroup","selected","onSelect","text","items","React","useState","open","setOpen","anchorRef","useRef","accessibilityControls","accessibilityExpanded","accessibilityHaspopup","iconEnd","onClick","prevVal","ref","size","anchor","current","id","onDismiss","map","el","Item","option","ToastMessage","message","dangerouslySetInlineStyle","__style","bottom","left","transform","fit","paddingX","position","Register","formContents","useSelector","state","forms","dispatch","useDispatch","console","log","bindActionCreators","actionCreators","inputContentChange","history","dropDownSelect","useHistory","showToast","setShowToast","toastMessage","setToastMessage","toastMessagePopUp","setTimeout","aidType","setAidType","goal","personalInfo","submit","a","applicant","personalDetails","emptyValues","callback","arr","length","settings","method","headers","body","JSON","stringify","fetch","ok","Error","alert","push","personalInfoField","type","item","onChange","placeholder","errorMessage","test","idx","padding","className","marginBottom","accessibilityLabel","role","color"],"mappings":"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","file":"static/js/3.5ec7b712.chunk.js","sourcesContent":["export const emailRegex = new RegExp(\n  /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i,\n);\n\nexport const toKorean = {\n  identity: '등록 포지션',\n  reason: '지원이 필요한 이유',\n  plan: '지원기간동안의 계획',\n  duration: '지원기간',\n  name: '이름',\n  gender: '성별',\n  birthday: '생년월일',\n  address: '주소',\n  email: '이메일',\n  phoneNumber: '전화번호',\n} as const;\n\nexport const identityItems = [\n  {\n    value: 'GodChild',\n    label: '장바구니가 필요해요',\n  },\n  {\n    value: 'GodParent',\n    label: '장바구니를 지원하고 싶어요',\n  },\n];\n\nexport const durationItems = [\n  {\n    value: '3m',\n    label: '3개월',\n  },\n  {\n    value: '6m',\n    label: '6개월',\n  },\n  {\n    value: '9m',\n    label: '9개월',\n  },\n  {\n    value: '12m',\n    label: '12개월',\n  },\n];\n\nexport const genderItems = [\n  {\n    value: 'female',\n    label: '여성',\n  },\n  {\n    value: 'male',\n    label: '남성',\n  },\n];\n","export const arrayOfEmptyValues = (obj: any) => {\n  return Object.keys(obj).filter((key) => obj[key] === null || obj[key] === '');\n};\n\nexport const emptyValueFound = (arr: any, callback: (key) => void) => {\n  if (arr.length) {\n    callback(arr[0]);\n    return true;\n  }\n  return false;\n};\n\nexport const fetchData = async (url: string, options?: any) => {\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    alert(\n      '죄송합니다. 서버에 문제가 있는 것 같아요. 잠시 후 다시 시도해주세요.',\n    );\n    throw new Error(`An error has occured: ${response.status}`);\n  }\n  const data = await response.json();\n  return data;\n};\n","import React from 'react';\nimport { Flex, Dropdown, Button } from 'gestalt';\n\ntype Item = { value: string; label: string };\n\ninterface DropdownProps {\n  selected: Item;\n  text: string;\n  items: Item[];\n  onSelect: ({ item }) => void;\n}\n\nconst DropdownGroup: React.FC<DropdownProps> = ({\n  selected,\n  onSelect,\n  text,\n  items,\n}) => {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  return (\n    <div>\n      <Flex>\n        <Button\n          accessibilityControls=\"action-variant-dropdown-example\"\n          accessibilityExpanded={open}\n          accessibilityHaspopup\n          iconEnd=\"arrow-down\"\n          onClick={() => setOpen((prevVal) => !prevVal)}\n          ref={anchorRef}\n          selected={open}\n          size=\"md\"\n          text={selected ? selected.label : text}\n        />\n        {open && (\n          <Dropdown\n            anchor={anchorRef.current}\n            id=\"action-variant-dropdown-example\"\n            onDismiss={() => setOpen(false)}\n          >\n            {items.map((el) => (\n              <Dropdown.Item\n                key={el.value}\n                onSelect={onSelect}\n                option={el}\n                selected={selected}\n              />\n            ))}\n          </Dropdown>\n        )}\n      </Flex>\n    </div>\n  );\n};\n\nexport default DropdownGroup;\n","import React from 'react';\nimport { Box, Layer, Toast } from 'gestalt';\n\nconst ToastMessage = ({ message }: { message: string }) => {\n  return (\n    <Layer>\n      <Box\n        dangerouslySetInlineStyle={{\n          __style: {\n            bottom: 50,\n            left: '50%',\n            transform: 'translateX(-50%)',\n          },\n        }}\n        fit\n        paddingX={1}\n        position=\"fixed\"\n      >\n        <Toast text={message} />\n      </Box>\n    </Layer>\n  );\n};\n\nexport default ToastMessage;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actionCreators, State } from '../state/index';\nimport { Button, TextField, Divider, Box, TextArea } from 'gestalt';\nimport emailjs from 'emailjs-com';\nimport {\n  identityItems,\n  durationItems,\n  genderItems,\n  toKorean,\n  emailRegex,\n} from '../constants';\nimport { arrayOfEmptyValues, emptyValueFound } from '../lib/formValidation';\nimport DropdownGroup from './components/DropdownGroup';\nimport ToastMessage from './components/ToastMessage';\n\ninterface Person {\n  goal: {\n    reason: string;\n    plan: string;\n  };\n  detail: {\n    name: string;\n    birthday: string;\n    email: string;\n    phoneNumber: string;\n    address: string;\n  };\n}\n\nconst Register = () => {\n  const formContents = useSelector((state: State) => state.forms);\n  const dispatch = useDispatch();\n  console.log(formContents);\n\n  const { inputContentChange, dropDownSelect } = bindActionCreators(\n    actionCreators,\n    dispatch,\n  );\n  const history = useHistory();\n\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  const toastMessagePopUp = (key) => {\n    setToastMessage(`${toKorean[key]}은 필수 항목입니다.`);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  const [aidType, setAidType] = useState({\n    identity: null,\n    duration: null,\n    gender: null,\n  });\n  const [goal, setGoal] = useState<Person['goal']>({\n    reason: '',\n    plan: '',\n  });\n  const [personalInfo, setPersonalInfo] = useState<Person['detail']>({\n    name: '',\n    birthday: '',\n    email: '',\n    phoneNumber: '',\n    address: '',\n  });\n  /** send info to email and server */\n  const submit = async () => {\n    /** validation */\n    let applicant = '장바구니가 필요한 분';\n    let personalDetails = {\n      ...aidType,\n      ...personalInfo,\n    };\n\n    if (aidType.identity !== null && aidType.identity.value === 'GodChild') {\n      applicant = '장바구니를 지원해주실 분';\n      personalDetails = {\n        ...personalDetails,\n        ...goal,\n      };\n    }\n\n    const emptyValues = arrayOfEmptyValues(personalDetails);\n    const messagePopUp = emptyValueFound(emptyValues, toastMessagePopUp);\n\n    if (messagePopUp) return;\n\n    personalDetails = {\n      ...personalDetails,\n      identity: aidType.identity.value,\n      duration: aidType.duration.value,\n      gender: aidType.gender.value,\n    };\n    const settings = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json; charset=utf-8' },\n      body: JSON.stringify(personalDetails),\n    };\n    const response = await fetch('/api/', settings);\n    if (!response.ok) {\n      return new Error('personal data fail to send to server');\n    }\n    await alert(\n      `성공적으로 등록되었습니다. 주변에 ${applicant}이 계시면 이메일로 알려드리겠습니다.`,\n    );\n\n    await history.push('/');\n  };\n\n  const infoList = [\n    {\n      type: 'dropdown',\n      text: '지원기간',\n      items: durationItems,\n      selected: aidType.duration,\n      onSelect: ({ item }) =>\n        setAidType({\n          ...aidType,\n          duration: item,\n        }),\n    },\n    {\n      type: 'textfield',\n      label: '이름',\n      id: 'name',\n      value: formContents.name,\n      onChange: inputContentChange,\n    },\n    {\n      type: 'dropdown',\n      text: '성별',\n      items: genderItems,\n      selected: aidType.gender,\n      onSelect: ({ item }) =>\n        setAidType({\n          ...aidType,\n          gender: item,\n        }),\n    },\n    {\n      type: 'textfield',\n      label: '생년월일',\n      id: 'birthday',\n      placeholder: 'YYYYMMDD형식으로 입력해주세요.',\n      value: formContents.birthday,\n      onChange: inputContentChange,\n    },\n    {\n      type: 'textfield',\n      label: '이메일',\n      id: `email`,\n      errorMessage:\n        personalInfo.email.length &&\n        emailRegex.test(personalInfo.email) === false\n          ? '올바른 이메일 주소를 입력해주세요.'\n          : null,\n      value: formContents.email,\n      onChange: inputContentChange,\n    },\n    {\n      type: 'textfield',\n      label: '전화번호',\n      id: `phoneNumber`,\n      value: formContents.phoneNumber,\n      onChange: inputContentChange,\n    },\n    {\n      type: 'textfield',\n      label: '주소',\n      id: 'address',\n      value: formContents.address,\n      onChange: inputContentChange,\n    },\n  ];\n\n  const personalInfoField = infoList.map((el, idx) => (\n    <Box key={idx} padding={2}>\n      {el.type === 'textfield' ? (\n        <TextField\n          label={el.label}\n          value={el.value}\n          placeholder={el.placeholder}\n          onChange={el.onChange}\n          id={el.id}\n          errorMessage={el.errorMessage}\n        />\n      ) : (\n        <DropdownGroup\n          text={el.text}\n          items={el.items}\n          selected={el.selected}\n          onSelect={el.onSelect}\n        />\n      )}\n    </Box>\n  ));\n\n  return (\n    <div className=\"register-container\">\n      <h1>등록 페이지</h1>\n      <h5>모든 항목은 필수 작성 항목입니다.</h5>\n      <DropdownGroup\n        items={identityItems}\n        text=\"저는\"\n        selected={aidType.identity}\n        onSelect={({ item }) =>\n          setAidType({\n            ...aidType,\n            identity: item,\n          })\n        }\n      />\n      {aidType.identity !== null && aidType.identity.value === 'GodChild' && (\n        <>\n          <h3>계획</h3>\n          <h5>\n            장바구니를 받는 동안 앞으로 나아가기 위한 나만의 계획을\n            공유해주세요.\n          </h5>\n          <Box padding={2}>\n            <TextArea\n              id=\"reason\"\n              value={formContents.reason}\n              onChange={inputContentChange}\n              label=\"지원이 필요한 이유\"\n            />\n          </Box>\n          <Box padding={2}>\n            <TextArea\n              id=\"plan\"\n              value={formContents.plan}\n              onChange={inputContentChange}\n              label=\"지원 기간 동안의 계획\"\n            />\n          </Box>\n          <Divider />\n        </>\n      )}\n      <h3>개인정보</h3>\n      {personalInfoField}\n      <Box padding={2} marginBottom={10}>\n        <Button\n          accessibilityControls=\"submit\"\n          accessibilityLabel=\"submit\"\n          role=\"button\"\n          onClick={() => submit()}\n          color=\"blue\"\n          text=\"등록하기\"\n        />\n      </Box>\n      {showToast ? <ToastMessage message={toastMessage} /> : ''}\n    </div>\n  );\n};\n\nexport default Register;\n"],"sourceRoot":""}